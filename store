#!/usr/bin/env node
var fs = require('fs')
var argv = require('yargs').
    demand(1).
    boolean('c').
    alias('c', 'changed').argv
var commands = argv._
var git = require('nodegit')

const STORE_DIR = '.store';

function summarize_wall_data(data, wallname) {
  var card_count = data.cards.length;
  console.log(wallname, (card_count !== undefined ? card_count : 0) + ' cards')
}

function read_wall_data(wallname, handler) {
  fs.readFile(STORE_DIR + '/' + wallname, function(err, json) {
    if (err) throw err
    var data = JSON.parse(json)
    if (data && data !== null) {
      handler(data, wallname);
    }
  })
}

function summarize_wall(wallname) {
  read_wall_data(wallname, summarize_wall_data);
}

function each_wall(handler) {
  fs.readdir(STORE_DIR, function(err, files) {
    if (err) throw err
    files.forEach(function(file) {
      if (file[0] !== '.') {
        handler(file);
      }
    })
  })
}
function summarize_changed_wall(repo, wall, git_status) {
  console.log(wall, {
    modified: git_status.isModified() !== 0,
    is_new: git_status.isNew() !== 0,
    in_index: git_status.inIndex() !== 0,
    in_working_tree: git_status.inWorkingTree() !== 0,
  })
}

function each_changed_wall_in_repo(handler) {
  git.Repository.open(STORE_DIR).then(function(repo) {
    repo.getStatus().then(function(statuses) {
      var git_changes = {}
      statuses.forEach(function(status) {
        git_changes[status.path()] = status;
      })
      each_wall(function(wall) {
        var git_status = git_changes[wall];
        if (git_status !== undefined) {
          handler(repo, wall, git_status)
        }
      })
    })
  })
}

var diff = require('deep-diff').diff
function text_summary(card) {
  if (card.text === undefined) return ''

  if (card.text.indexOf('data:image') === 0) {
    return '(an image, ' + card.text.length + ' bytes, id ' + card.id + ')'
  }
  return card.text.split(/\n/).join(' ')
}

const verbatim_field_exclusions = ['top', 'left', 'text', 'image_src']
function card_change_summary(changes, before, after) {
  var summary = []
  if (changes.top !== undefined || changes.left !== undefined) {
    summary.push('moved from ' + before.left + ',' + before.top + ' to ' + after.left + ',' + after.top)
  }
  for (var changed_field in changes) {
    if (verbatim_field_exclusions.indexOf(changed_field) == -1) {
      summary.push(changed_field + ' changed from ' + changes[changed_field].was + ' to ' + changes[changed_field].became)
    }
  }
  return summary.join(', ');
}
function compare_walls(wallname, before, after) {
  console.log("**** wall: " + wallname + " ****")
  console.log("before had " + before.cards.length + " cards")
  console.log("after has " + after.cards.length + " cards")
  console.log("diffs: ")
  var modified = {};
  var added = [];
  diff(before, after).forEach(function(change) {
    if (change.path[0] === 'cards') {
      var card_id = change.path[1];
      if (change.kind === "E") {
        modified[card_id] = modified[card_id] || {}
        modified[card_id][change.path[2]] = { was: change.lhs, became: change.rhs}
      }
      else if (change.kind === "A") {
        var array_change = change.item
        if (array_change.kind === 'N') {
          added.push(array_change.rhs)
        }
      }
    }
    else {
      console.log("Unhandled change path root: " + change.path[0])
      console.log(JSON.stringify(change))
    }
  })
  for (var modified_card in modified) {
    var card_changes = modified[modified_card];
    console.log("'" + text_summary(before.cards[modified_card]) + "': " + card_change_summary(card_changes, before.cards[modified_card], after.cards[modified_card]))
  }
  for (var added_card in added) {
    console.log('New card: ' + text_summary(added[added_card]))
  }
}

if (commands[0] == 'list') {
  if (argv.changed) {
    each_changed_wall_in_repo(summarize_changed_wall);
  }
  else {
    each_wall(summarize_wall)
  }
}
else if (commands[0] == 'diff') {
  each_changed_wall_in_repo(function(repo, wallname, git_status) {
    repo.getBranchCommit('master').then(function(commit) {
      return commit.getEntry(wallname);
    }).then(function(wallTreeEntry) {
      wallTreeEntry.getBlob().then(function(blob) {
        try {
          var previous = JSON.parse(blob.toString())
          read_wall_data(wallname, function(data) {
            compare_walls(wallname, previous, data);
          })
        } catch (e) {
          console.error(e)
        }
      });
  });
  });
}
